group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_median$NDVI_pred_median, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_median$NDVI_pred_median, type = 'line',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "NDVI2",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3))  %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "NDVI2",
line = list(color = 'rgba(34, 139, 34, 0.8)', width = 3))  %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "NDVI2",
line = list(color = 'rgba(139, 69, 19, 0.6)', width = 2))  %>%
# add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
#           mode = 'markers', name = "NDVI in the selected day",
#           marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
line = list(color = 'rgba(139, 69, 19, 0.6)', width = 2))  %>%
# add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
#           mode = 'markers', name = "NDVI in the selected day",
#           marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
line = list(color = 'rgba(139, 69, 19, 0.6)', width = 3))  %>%
# add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
#           mode = 'markers', name = "NDVI in the selected day",
#           marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
line = list(color = 'rgba(139, 69, 19, 0.6)', width = 3))  %>%
# add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
#           mode = 'markers', name = "NDVI in the selected day",
#           marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Selected Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
line = list(color = 'rgba(139, 69, 19, 0.6)', width = 3))  %>%
# add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
#           mode = 'markers', name = "NDVI in the selected day",
#           marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_soil_moisture_stack <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
# Verificar si hay datos para el DOY
if (nrow(df_doy) == 0) {
stop("No data available for the specified DOY.")
}
# Gráfico 1: Barras apiladas para PWP y FC
pwp_fc_plot <- plot_ly(df_doy, x = ~1) %>%
add_bars(y = ~PWP, name = "PWP", marker = list(color = 'rgba(255, 102, 102, 0.7)')) %>%
add_bars(y = ~FC - PWP, name = "FC", marker = list(color = 'rgba(144, 238, 144, 0.7)'), base = ~PWP) %>%
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
barmode = "stack",  # Modo apilado
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Gráfico 2: Gráfico de barras para sm
sm_plot <- plot_ly(df_doy, x = ~1) %>%
add_bars(y = ~sm, name = "Soil Moisture", marker = list(color = 'rgba(30, 144, 255, 0.7)')) %>%
# Añadir líneas diagonales celestes como trama en el área de sm
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Colocar los dos gráficos lado a lado usando subplot
combined_plot <- subplot(pwp_fc_plot, sm_plot, nrows = 1, shareY = TRUE, titleX = TRUE)
return(combined_plot)
}
plot_soil_moisture_stack(df_combined1, plot = "2701", DOY = as.Date("2024-07-09"))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
# add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
#           line = list(color = 'rgba(139, 69, 19, 0.6)', width = 3))  %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(dash = 'dot',color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
# add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
#           line = list(color = 'rgba(139, 69, 19, 0.6)', width = 3))  %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(dash = 'dot',color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
# add_lines(x = df_doy$Date, y = ~df_median$NDVI_pred_median, name = "Selected day",
#           line = list(color = 'rgba(139, 69, 19, 0.6)', width = 3))  %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
#df_combined1 %>% group_by(Date) %>% summarise(NDVI_pred_median = median(NDVI_pred))
plot_etc <- function(data, plot) {
df_filtered <- data %>% filter(Plot_ID == plot)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_trace(y = ~etc_mm_pred, type = 'scatter', mode = 'lines', name = "ETc (mm)", yaxis = "y2",
line = list(color = 'rgba(139, 69, 19, 0.8)')) %>%
add_trace(y = ~SRAVG, type = 'scatter', mode = 'lines', name = "Radiation", yaxis = "y",
line = list(color = 'darkred', opacity = .5)) %>%
add_trace(y = ~TEMP2MMAX, type = 'scatter', mode = 'lines', name = "Maximum Temperature", yaxis = "y3",
line = list(color = 'grey10', opacity = .5)) %>%
add_trace(y = ~TEMP2MMIN, type = 'scatter', mode = 'lines', name = "Minimum Temperature", yaxis = "y3",
line = list(color = 'grey', opacity = .5), fill = 'tonexty', fillcolor = 'grey50') %>%
layout(
title = list(text = paste("Water Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
# Primary y-axis on the right
yaxis = list(title = list(text = "Radiation", font = list(size = 16)), tickfont = list(size = 14), side = "right"),
# Secondary y-axis on the left for ETc
yaxis2 = list(title = list(text = "Irrigation / Rainfall (mm)", font = list(size = 16)), tickfont = list(size = 14),
overlaying = "y", side = "left", position = ),
# Third y-axis, positioned outside the plot area
yaxis3 = list(title = list(text = "Temperature (°C)", font = list(size = 16)), tickfont = list(size = 14),
side = "left", overlaying = "y", position = -0.1),  # Negative position moves it outside the plot
margin = list(l = 120, r = 100, t = 70, b = 70),  # Adjusted left margin for extra space
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.2) # Adjusted legend position and size
)
return(plot)
}
plot_etc(df_combined2,plot="2502")
plot_etc <- function(data, plot) {
df_filtered <- data %>% filter(Plot_ID == plot)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_trace(y = ~etc_mm_pred, type = 'scatter', mode = 'lines', name = "ETc (mm)", yaxis = "y2",
line = list(color = 'rgba(139, 69, 19, 0.8)')) %>%
add_trace(y = ~SRAVG, type = 'scatter', mode = 'lines', name = "Radiation", yaxis = "y",
line = list(color = 'darkred', opacity = .5)) %>%
add_trace(y = ~TEMP2MMAX, type = 'scatter', mode = 'lines', name = "Maximum Temperature", yaxis = "y3",
line = list(color = 'grey10', opacity = .5)) %>%
add_trace(y = ~TEMP2MMIN, type = 'scatter', mode = 'lines', name = "Minimum Temperature", yaxis = "y3",
line = list(color = 'grey', opacity = .5), fill = 'tonexty', fillcolor = 'grey50') %>%
layout(
title = list(text = paste("Water Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
# Primary y-axis on the right
yaxis = list(title = list(text = "Radiation", font = list(size = 16)), tickfont = list(size = 14), side = "right"),
# Secondary y-axis on the left for ETc
yaxis2 = list(title = list(text = "Irrigation / Rainfall (mm)", font = list(size = 16)),
tickfont = list(size = 14),
overlaying = "y", side = "left"),
# Third y-axis, positioned outside the plot area
yaxis3 = list(title = list(text = "Temperature (°C)", font = list(size = 16)), tickfont = list(size = 14),
side = "left", overlaying = "y", position = -0.1),  # Negative position moves it outside the plot
margin = list(l = 120, r = 100, t = 70, b = 70),  # Adjusted left margin for extra space
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.2) # Adjusted legend position and size
)
return(plot)
}
plot_etc(df_combined2,plot="2502")
plot_soil_moisture_stack <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
# Verificar si hay datos para el DOY
if (nrow(df_doy) == 0) {
stop("No data available for the specified DOY.")
}
# Gráfico 1: Barras apiladas para PWP y FC
pwp_fc_plot <- plot_ly(df_doy, x = ~1) %>%
add_bars(y = ~PWP, name = "PWP", marker = list(color = 'rgba(255, 102, 102, 0.7)')) %>%
add_bars(y = ~FC - PWP, name = "FC", marker = list(color = 'rgba(144, 238, 144, 0.7)'), base = ~PWP) %>%
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
barmode = "stack",  # Modo apilado
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Gráfico 2: Gráfico de barras para sm
sm_plot <- plot_ly(df_doy, x = ~1) %>%
add_bars(y = ~sm, name = "Soil Moisture", marker = list(color = 'rgba(30, 144, 255, 0.7)')) %>%
# Añadir líneas diagonales celestes como trama en el área de sm
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Colocar los dos gráficos lado a lado usando subplot
combined_plot <- subplot(pwp_fc_plot, sm_plot, nrows = 1, shareY = TRUE, titleX = TRUE)
return(combined_plot)
}
plot_soil_moisture_stack(df_combined1, plot = "2701", DOY = as.Date("2024-07-09"))
plot_irrigation_comparison <- function(data, plot_id) {
# Filtrar datos para el plot especificado
df_filtered_plot <- data %>%
filter(Plot_ID == plot_id)
# Calcular el riego acumulado para el plot especificado
cumulative_irrigation_plot <- df_filtered_plot %>%
summarize(cumulative_irrigation = sum(Irrigation_mm, na.rm = TRUE)) %>%
pull(cumulative_irrigation)
# Calcular el riego acumulado promedio para todos los otros plots
cumulative_irrigation_others <- data %>%
filter(Plot_ID != plot_id) %>%
group_by(Plot_ID) %>%
summarize(cumulative_irrigation = sum(Irrigation_mm, na.rm = TRUE)) %>%
summarize(mean_cumulative_irrigation = mean(cumulative_irrigation, na.rm = TRUE)) %>%
pull(mean_cumulative_irrigation)
# Crear el gráfico de barras
plot_ly() %>%
add_bars(
x = c('Specified Plot', 'Average of Other Plots'),
y = c(cumulative_irrigation_plot, cumulative_irrigation_others),
marker = list(color = c('rgba(30, 144, 255, 0.7)', 'rgba(255, 165, 0, 0.7)'))
) %>%
layout(
title = paste("Cumulative Irrigation for Plot", plot_id, "vs Others"),
yaxis = list(title = 'Cumulative Irrigation (mm)'),
xaxis = list(title = ''),
showlegend = FALSE
)
}
plot_irrigation_comparison(df_combined2, "2502")
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='wildcatsquadtaps',
token='83D9A48358691F440429C4C01FF615DA',
secret='m1l2zF9grYDX+9tOQGfp7YwRjftzA7XO9OIWt507')
library(rsconnect)
rsconnect::deployApp('./app/app.R')
library(rsconnect)
rsconnect::deployApp('~/TAPS-Hackathon-2024/app')
rlang::last_trace()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='wildcatsquadtaps', token='83D9A48358691F440429C4C01FF615DA', secret='m1l2zF9grYDX+9tOQGfp7YwRjftzA7XO9OIWt507')
shiny::runApp('app')
