add_bars(y = ~sm, name = "Soil Moisture", marker = list(color = 'rgba(30, 144, 255, 0.7)')) %>%
# Añadir líneas diagonales celestes como trama en el área de sm
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Colocar los dos gráficos lado a lado usando subplot
combined_plot <- subplot(pwp_fc_plot, sm_plot, nrows = 1, shareY = TRUE, titleX = TRUE)
return(combined_plot)
}
# Ejemplo de llamada a la función
plot_soil_moisture_stack(df_combined1, plot = "2502", DOY = as.Date("2024-07-09"))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "Soil Moisture (DOY)", marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)), tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)), tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)), tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_soil_moisture <- function(data, plot, DOY) {
# Verificar si DOY es un número (día del año) y convertirlo a formato de fecha
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))  # Usar el año más pequeño como referencia
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
# Filtrar el dataframe por Plot_ID y la fecha específica (DOY)
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
# Crear el gráfico
plot <- plot_ly(df_filtered, x = ~Date) %>%
# Añadir barras para Precipitación e Irrigación
add_bars(y = ~PRECIP, name = "Rainfall", yaxis = "y2", marker = list(color = 'rgba(30, 144, 255, 0.7)', type = 'bar', width = 1)) %>%
add_bars(y = ~Irrigation_mm, name = "Irrigation", yaxis = "y2", marker = list(color = 'rgba(0, 0, 139, 0.7)', type = 'bar', width = 1)) %>%
# Añadir traza para Soil Moisture
add_trace(y = ~sm, type = 'scatter', mode = 'lines', name = "Soil Moisture (Calc'd)", yaxis = "y",
line = list(color = 'rgba(139, 69, 19, 0.8)')) %>%
# Añadir formas de las zonas (rectángulos)
layout(shapes = list(
list(type = "rect", fillcolor = "rgba(255, 0, 0, 0.1)", line = list(color = "rgba(173, 216, 230, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = 0, y1 = max(df_filtered$PWP, na.rm = TRUE), yref = "y"),
list(type = "rect", fillcolor = "rgba(0, 255, 0, 0.1)", line = list(color = "rgba(144, 238, 144, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = min(df_filtered$PWP, na.rm = TRUE), y1 = max(df_filtered$FC, na.rm = TRUE), yref = "y"),
list(type = "rect", fillcolor = "rgba(255, 255, 0, 0.1)", line = list(color = "rgba(255, 255, 0, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = min(df_filtered$FC, na.rm = TRUE), y1 = max(df_filtered$sm, na.rm = TRUE), yref = "y")
)) %>%
# Añadir líneas para Field Capacity y Wilting Point
add_lines(y = ~FC, name = "Field Capacity", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~PWP, name = "Wilting Point", line = list(dash = 'dash', color = 'rgba(255, 69, 0, 0.8)', width = 3)) %>%
# Añadir puntos para la fecha específica (DOY)
add_trace(x = df_doy$Date, y = df_doy$sm, type = 'scatter', mode = 'markers', name = "Soil Moisture (DOY)", marker = list(color = 'rgba(139, 69, 19, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$PRECIP, type = 'scatter', mode = 'markers', name = "Rainfall (DOY)", yaxis = "y2", marker = list(color = 'rgba(30, 144, 255, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$Irrigation_mm, type = 'scatter', mode = 'markers', name = "Irrigation (DOY)", yaxis = "y2", marker = list(color = 'rgba(0, 0, 139, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$FC, type = 'scatter', mode = 'markers', name = "Field Capacity (DOY)", marker = list(color = 'rgba(34, 139, 34, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$PWP, type = 'scatter', mode = 'markers', name = "Wilting Point (DOY)", marker = list(color = 'rgba(255, 69, 0, 1)', size = 10)) %>%
# Layout y personalización
layout(
title = list(text = paste("Water Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "Soil Moisture (%)", font = list(size = 16)), tickfont = list(size = 14), side = "right"),
yaxis2 = list(title = list(text = "Irrigation / Rainfall (mm)", font = list(size = 16)), tickfont = list(size = 14), overlaying = "y", side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1) # Adjusted legend position and size
)
return(plot)
}
# Llamada a la función con la nueva entrada DOY en formato de fecha
plot_soil_moisture(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_soil_moisture <- function(data, plot, DOY) {
# Verificar si DOY es un número (día del año) y convertirlo a formato de fecha
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))  # Usar el año más pequeño como referencia
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
# Filtrar el dataframe por Plot_ID y la fecha específica (DOY)
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
# Crear el gráfico
plot <- plot_ly(df_filtered, x = ~Date) %>%
# Añadir barras para Precipitación e Irrigación
add_bars(y = ~PRECIP, name = "Rainfall", yaxis = "y2", marker = list(color = 'rgba(30, 144, 255, 0.7)', type = 'bar', width = 1)) %>%
add_bars(y = ~Irrigation_mm, name = "Irrigation", yaxis = "y2", marker = list(color = 'rgba(0, 0, 139, 0.7)', type = 'bar', width = 1)) %>%
# Añadir traza para Soil Moisture
add_trace(y = ~sm, type = 'scatter', mode = 'lines', name = "Soil Moisture (Calc'd)", yaxis = "y",
line = list(color = 'rgba(139, 69, 19, 0.8)')) %>%
# Añadir formas de las zonas (rectángulos)
layout(shapes = list(
list(type = "rect", fillcolor = "rgba(255, 0, 0, 0.1)", line = list(color = "rgba(173, 216, 230, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = 0, y1 = max(df_filtered$PWP, na.rm = TRUE), yref = "y"),
list(type = "rect", fillcolor = "rgba(0, 255, 0, 0.1)", line = list(color = "rgba(144, 238, 144, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = min(df_filtered$PWP, na.rm = TRUE), y1 = max(df_filtered$FC, na.rm = TRUE), yref = "y"),
list(type = "rect", fillcolor = "rgba(255, 255, 0, 0.1)", line = list(color = "rgba(255, 255, 0, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = min(df_filtered$FC, na.rm = TRUE), y1 = max(df_filtered$sm, na.rm = TRUE), yref = "y")
)) %>%
# Añadir líneas para Field Capacity y Wilting Point
add_lines(y = ~FC, name = "Field Capacity", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~PWP, name = "Wilting Point", line = list(dash = 'dash', color = 'rgba(255, 69, 0, 0.8)', width = 3)) %>%
# Añadir puntos para la fecha específica (DOY)
add_trace(x = df_doy$Date, y = df_doy$sm, type = 'scatter', mode = 'markers', name = "Soil Moisture (DOY)", marker = list(color = 'rgba(139, 69, 19, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$PRECIP, type = 'scatter', mode = 'markers', name = "Rainfall (DOY)", yaxis = "y2", marker = list(color = 'rgba(30, 144, 255, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$Irrigation_mm, type = 'scatter', mode = 'markers', name = "Irrigation (DOY)", yaxis = "y2", marker = list(color = 'rgba(0, 0, 139, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$FC, type = 'scatter', mode = 'markers', name = "Field Capacity (DOY)", marker = list(color = 'rgba(34, 139, 34, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$PWP, type = 'scatter', mode = 'markers', name = "Wilting Point (DOY)", marker = list(color = 'rgba(255, 69, 0, 1)', size = 10)) %>%
# Layout y personalización
layout(
title = list(text = paste("Water Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "Soil Moisture (%)", font = list(size = 16)), tickfont = list(size = 14), side = "right"),
yaxis2 = list(title = list(text = "Irrigation / Rainfall (mm)", font = list(size = 16)), tickfont = list(size = 14), overlaying = "y", side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1) # Adjusted legend position and size
)
return(plot)
}
# Llamada a la función con la nueva entrada DOY en formato de fecha
plot_soil_moisture(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_soil_moisture <- function(data, plot, DOY) {
# Verificar si DOY es un número (día del año) y convertirlo a formato de fecha
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))  # Usar el año más pequeño como referencia
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
# Filtrar el dataframe por Plot_ID y la fecha específica (DOY)
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
# Crear el gráfico
plot <- plot_ly(df_filtered, x = ~Date) %>%
# Añadir barras para Precipitación e Irrigación
add_bars(y = ~PRECIP, name = "Rainfall", yaxis = "y2", marker = list(color = 'rgba(30, 144, 255, 0.7)', type = 'bar', width = 1)) %>%
add_bars(y = ~Irrigation_mm, name = "Irrigation", yaxis = "y2", marker = list(color = 'rgba(0, 0, 139, 0.7)', type = 'bar', width = 1)) %>%
# Añadir traza para Soil Moisture
add_trace(y = ~sm, type = 'scatter', mode = 'lines', name = "Soil Moisture (Calc'd)", yaxis = "y",
line = list(color = 'rgba(139, 69, 19, 0.8)')) %>%
# Añadir formas de las zonas (rectángulos)
layout(shapes = list(
list(type = "rect", fillcolor = "rgba(255, 0, 0, 0.1)", line = list(color = "rgba(173, 216, 230, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = 0, y1 = max(df_filtered$PWP, na.rm = TRUE), yref = "y"),
list(type = "rect", fillcolor = "rgba(0, 255, 0, 0.1)", line = list(color = "rgba(144, 238, 144, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = min(df_filtered$PWP, na.rm = TRUE), y1 = max(df_filtered$FC, na.rm = TRUE), yref = "y"),
list(type = "rect", fillcolor = "rgba(255, 255, 0, 0.1)", line = list(color = "rgba(255, 255, 0, 0)"),
x0 = min(df_filtered$Date), x1 = max(df_filtered$Date), y0 = min(df_filtered$FC, na.rm = TRUE), y1 = max(df_filtered$sm, na.rm = TRUE), yref = "y")
)) %>%
# Añadir líneas para Field Capacity y Wilting Point
add_lines(y = ~FC, name = "Field Capacity", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~PWP, name = "Wilting Point", line = list(dash = 'dash', color = 'rgba(255, 69, 0, 0.8)', width = 3)) %>%
# Añadir puntos para la fecha específica (DOY)
add_trace(x = df_doy$Date, y = df_doy$sm, type = 'scatter', mode = 'markers', name = "Soil Moisture (DOY)", marker = list(color = 'rgba(139, 69, 19, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$PRECIP, type = 'scatter', mode = 'markers', name = "Rainfall (DOY)", yaxis = "y2", marker = list(color = 'rgba(30, 144, 255, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$Irrigation_mm, type = 'scatter', mode = 'markers', name = "Irrigation (DOY)", yaxis = "y2", marker = list(color = 'rgba(0, 0, 139, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$FC, type = 'scatter', mode = 'markers', name = "Field Capacity (DOY)", marker = list(color = 'rgba(34, 139, 34, 1)', size = 10)) %>%
add_trace(x = df_doy$Date, y = df_doy$PWP, type = 'scatter', mode = 'markers', name = "Wilting Point (DOY)", marker = list(color = 'rgba(255, 69, 0, 1)', size = 10)) %>%
# Layout y personalización
layout(
title = list(text = paste("Water Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "Soil Moisture (%)", font = list(size = 16)), tickfont = list(size = 14), side = "right"),
yaxis2 = list(title = list(text = "Irrigation / Rainfall (mm)", font = list(size = 16)), tickfont = list(size = 14), overlaying = "y", side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1) # Adjusted legend position and size
)
return(plot)
}
# Llamada a la función con la nueva entrada DOY en formato de fecha
plot_soil_moisture(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
# Llamada a la función con la nueva entrada DOY en formato de fecha
plot_soil_moisture(df_combined1, plot = "2502", DOY = as.Date("2024-07-09"))
shiny::runApp('app')
plot_etc <- function(data, plot) {
df_filtered <- data %>% filter(Plot_ID == plot)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_trace(y = ~etc_mm_pred, type = 'scatter', mode = 'lines', name = "ETc (mm)", yaxis = "y2",
line = list(color = 'rgba(139, 69, 19, 0.8)')) %>%
add_trace(y = ~SRAVG, type = 'scatter', mode = 'lines', name = "Radiation", yaxis = "y",
line = list(color = 'darkred', opacity = .5)) %>%
add_trace(y = ~TEMP2MMAX, type = 'scatter', mode = 'lines', name = "Maximum Temperature", yaxis = "y3",
line = list(color = 'grey10', opacity = .5)) %>%
add_trace(y = ~TEMP2MMIN, type = 'scatter', mode = 'lines', name = "Minimum Temperature", yaxis = "y3",
line = list(color = 'grey', opacity = .5), fill = 'tonexty', fillcolor = 'grey50') %>%
layout(
title = list(text = paste("Water Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
# Primary y-axis on the right
yaxis = list(title = list(text = "Radiation", font = list(size = 16)), tickfont = list(size = 14), side = "right"),
# Secondary y-axis on the left for ETc
yaxis2 = list(title = list(text = "Irrigation / Rainfall (mm)", font = list(size = 16)), tickfont = list(size = 14),
overlaying = "y", side = "left", position = ),
# Third y-axis, positioned outside the plot area
yaxis3 = list(title = list(text = "Temperature (°C)", font = list(size = 16)), tickfont = list(size = 14),
side = "left", overlaying = "y", position = -0.1),  # Negative position moves it outside the plot
margin = list(l = 120, r = 100, t = 70, b = 70),  # Adjusted left margin for extra space
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.2) # Adjusted legend position and size
)
return(plot)
}
plot_etc(df_combined2,plot="2502")
plot_ndvi <- function(data, plot, DOY) {
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_pred, name = "NDVI", line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)), tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
return(plot)
}
plot_ndvi(df_combined1, plot = "2502", DOY = as.Date("2024-07-08"))
plot_soil_moisture_stack <- function(data, plot, DOY) {
# Verificar si DOY es numérico y convertirlo a fecha
if (is.numeric(DOY)) {
year_ref <- lubridate::year(min(data$Date))  # Tomar el año más pequeño como referencia
DOY <- as.Date(DOY - 1, origin = paste0(year_ref, "-01-01"))
}
# Filtrar los datos por Plot_ID y la fecha específica (DOY)
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
# Verificar si hay datos para el DOY
if (nrow(df_doy) == 0) {
stop("No data available for the specified DOY.")
}
# Gráfico 1: Barras apiladas para PWP y FC
pwp_fc_plot <- plot_ly(df_doy, x = ~1) %>%
add_bars(y = ~PWP, name = "PWP", marker = list(color = 'rgba(255, 102, 102, 0.7)')) %>%
add_bars(y = ~FC, name = "FC", marker = list(color = 'rgba(144, 238, 144, 0.7)'), base = ~PWP) %>%
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
barmode = "stack",  # Modo apilado
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Gráfico 2: Gráfico de barras para sm
sm_plot <- plot_ly(df_doy, x = ~1) %>%
add_bars(y = ~sm, name = "Soil Moisture", marker = list(color = 'rgba(30, 144, 255, 0.7)')) %>%
# Añadir líneas diagonales celestes como trama en el área de sm
layout(
xaxis = list(title = "", showticklabels = FALSE, zeroline = FALSE),  # Ocultar etiquetas del eje X
yaxis = list(title = list(text = "Soil Moisture", font = list(size = 16)), tickfont = list(size = 14)),
legend = list(font = list(size = 14), orientation = "h", x = 0.5, xanchor = "center", y = -0.1)
)
# Colocar los dos gráficos lado a lado usando subplot
combined_plot <- subplot(pwp_fc_plot, sm_plot, nrows = 1, shareY = TRUE, titleX = TRUE)
return(combined_plot)
}
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
View(df_dynamic)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
View(dynamic_data)
View(df_dynamic)
View(dynamic_data)
View(df_dynamic)
write.csv(df_dynamic, "dynamic_df.csv")
runApp('app')
data <- df_dynamic %>% filter(Date == 129)
View(data)
data <- df_dynamic %>% filter(Date >= 129)
write.csv(data, "dynamic_df.csv")
runApp('app')
data <- df_dynamic %>% filter(Date >= 129, Plot_ID != 2706, Plot_ID != 1702)
View(data)
View(dynamic_data)
runApp('app')
289+129
418/2
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
129+289
418/2
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
DOY<-200
plot <- 1206
data <- dynamic_data
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
if (nrow(df_doy) == 0) {
stop("No data available for the specified DOY.")
}
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_Pred))
View(df_median)
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_Pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(dash = 'dot',color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_Pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
plot
View(df_median)
View(df_filtered)
View(df_doy)
View(df_filtered)
days <- df_filtered$Date
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_Pred)) %>%
filter(Date %in% days)
df_median <- data %>% filter(Plot_ID != plot) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_Pred)) %>%
filter(Date %in% days)
df_median <- data %>%
filter(Plot_ID != plot,
Date %in% days) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_Pred))
DOY <- 209
plot <- 1206
df_filtered <- data %>% filter(Plot_ID == plot)
data <- read.csv("app/data/dynamic_df.csv")
df_filtered <- data %>% filter(Plot_ID == plot)
df_doy <- df_filtered %>% filter(Date == DOY)
if (nrow(df_doy) == 0) {
stop("No data available for the specified DOY.")
}
days <- df_filtered$Date
df_median <- data %>%
filter(Plot_ID != plot,
Date %in% days) %>%
group_by(Date) %>%
summarise(NDVI_pred_median = median(NDVI_Pred))
plot <- plot_ly(df_filtered, x = ~Date) %>%
add_lines(y = ~NDVI_Pred, name = "NDVI in the selected plot",
line = list(dash = 'dash', color = 'rgba(34, 139, 34, 0.8)', width = 3)) %>%
add_lines(y = ~df_median$NDVI_pred_median,
name = "Median NDVI", line = list(dash = 'dot',color = 'rgba(34, 34, 34, 0.8)', width = 3)) %>%
add_trace(x = df_doy$Date, y = df_doy$NDVI_Pred, type = 'scatter',
mode = 'markers', name = "NDVI in the selected day",
marker = list(color = 'rgba(139, 69, 19, 1)', size = 10))  %>%
layout(
title = list(text = paste("NDVI Dynamics for Plot", plot), font = list(size = 18)),
xaxis = list(title = list(text = "", font = list(size = 16)), tickfont = list(size = 14)),
yaxis = list(title = list(text = "NDVI", font = list(size = 16)),
tickfont = list(size = 14), side = "left"),
legend = list(font = list(size = 14), orientation = "h", x = 0.5,
xanchor = "center", y = -0.1)
)
plot
runApp('app')
View(temporal_soil_moisture)
